require 'pathname'

module Twine
  module Formatters
    class AppleSwiftTag < Abstract
      
      def format_name
        'apple-swift-tag'
      end
      
      def extension
        '.swift'
      end

      def self.can_handle_directory?(path)
        true
      end

      def default_file_name
        return 'R2Tag+TxtFileName.swift'
      end

      def determine_language_given_path(path)
        raise 'not going to implement'
      end

      def format_file(lang)
        filePath = Pathname.new(@options[:output_path])
        stringFileName = filePath.basename.to_s[0..-7]
        impl = "R2Tag+" + stringFileName + ".swift"
        @options[:output_path] = filePath.dirname + impl
        result = super + "\n\n}\n"
      end

      def format_header(lang)
        %(//
// Generated by Twine #{Twine::VERSION}
//

import Foundation

extension R2Tag {)
      end

      def format_value(value)
        value.gsub("\"", "\\\"")
      end

      def format_section_header(section)
        "    // MARK: - #{section.name}"
      end

      def key_value_pattern
        %(
    var %{key}: String {
        return "%{value}"
    })
      end

      def format_comment(definition, lang)
        comment = ''
        if definition.comment
          comment = "\n    /// #{definition.comment}"
        end
        %(#{comment})
      end

    end
  end
end

Twine::Formatters.formatters << Twine::Formatters::AppleSwiftTag.new
